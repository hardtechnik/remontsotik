version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.4

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install dependencies
          command: |
            sudo pip install flake8 isort

      - run:
          name: Run linters
          command: |
            flake8 .
            isort -c

      - run:
          name: Build image
          command: |
            docker build . -t $IMAGE

      - run:
          name: Run tests
          command: |
            docker-compose -f compose/ci.yaml run --use-aliases test.server pytest --junitxml=test-reports/junit.xml

      - run:
          name: Save test results
          when: always
          command: |
            docker cp `docker-compose -f compose/ci.yaml ps -qa test.server`:/src/test-reports .

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports/screenshots
          destination: screenshots

      - run:
          name: Save image
          command: |
            docker save -o app-image.tar $IMAGE

      - persist_to_workspace:
          root: .
          paths:
            - app-image.tar
            - keys.tar.enc
            - compose/prod.yaml

  deploy:
    docker:
      - image: circleci/python:3.7.4

    steps:
      - attach_workspace:
          at: /tmp/build

      - setup_remote_docker

      - run:
          name: Load image
          command: |
            docker load -i /tmp/build/app-image.tar

      - run:
          name: Install dependencies
          command: |
            sudo pip install awscli

      - run:
          name: Build and upload static files
          command: |
            docker build -f Dockerfile_frontend -t frontend
            docker create -v /static --name static alpine:3.4 /bin/true
            docker run --name app --volumes-from static frontend \
              cd frontend \
              && npm install \
              && npm build \
              && ./manage.py collectstatic --noinput
            docker cp app:/static ./static
            aws --endpoint-url=https://storage.yandexcloud.net s3 cp --recursive ./static s3://$STATIC_BUCKET --cache-control 'public,max-age=600'

      - run:
          name: Push image
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push $IMAGE

      - run:
          name: Extract keys
          command: |
            openssl aes-256-cbc -pbkdf2 -d -in /tmp/build/keys.tar.enc -out keys.tar -k $ENCRYPTION_KEY
            tar xvf keys.tar

      - run:
          name: Run migrations and update services
          command: |
            export DOCKER_HOST=$REMOTE_DOCKER_HOST:2375
            export DOCKER_TLS_VERIFY=1
            export DOCKER_CERT_PATH=keys
            docker pull $IMAGE
            docker-compose -f /tmp/build/compose/prod.yaml run --rm server bash -c './manage.py migrate && ./manage.py loaddata statuses'
            docker-compose -f /tmp/build/compose/prod.yaml down
            docker stack deploy --prune --compose-file /tmp/build/compose/prod.yaml phonerepair
            docker system prune -f

workflows:
  version: 2
  workflow:
    jobs:
    - build
    - deploy:
        requires:
          - build
        filters:
          branches:
            only: master

dist: bionic
language: python
python:
  - "3.7"

cache:
  - pip

services:
  - docker

jobs:
  include:
    - stage: test
      name: Test
      cache:
        directories:
          - $HOME/docker-images
      install: pip install isort flake8
      env:
        - CACHED_APP_IMAGE=$HOME/docker-images/app
      before_script:
        - flake8 .
        - isort -c
        - |
          [[ -f "$CACHED_APP_IMAGE" ]] && \
            docker load -i "$CACHED_APP_IMAGE" || true
        - docker build . --cache-from $IMAGE -t $IMAGE
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        - docker save -o "$CACHED_APP_IMAGE" $IMAGE
      script:
        - set -e
        - |
          docker-compose \
            -f compose/ci.yaml \
            run --use-aliases test.server \
            pytest --junitxml=test-reports/junit.xml
        - docker push $IMAGE

    - stage: deploy
      name: Deploy Static
      if: branch = master
      language: node_js
      cache:
        - npm
        - pip
      services:
        - docker
      before_install:
        - nvm install 11.15.0
        - nvm use 11.15.0
      install: pip install --user awscli
      before_script:
        - docker pull $IMAGE
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      script:
        - set -e
        - cd src/frontend
        - npm install && npm run-script build
        - mkdir static-ready
        - |
          docker run --rm \
            -v $PWD/dist:/src/frontend/dist \
            -v $PWD/static-ready:/static \
            $IMAGE ./manage.py collectstatic --noinput
        - cd ../..
        - docker build -f Dockerfile_static . -t $STATIC_IMAGE
        - docker push $STATIC_IMAGE
#          aws --endpoint-url=https://storage.yandexcloud.net s3 cp \
#            --recursive ./static-ready $STATIC_BUCKET \
#            --cache-control 'public,max-age=600'

    - stage: deploy
      name: Update Services
      if: branch=master
      env:
        - DOCKER_HOST=$REMOTE_DOCKER_HOST:2375
        - DOCKER_TLS_VERIFY=1
        - DOCKER_CERT_PATH=keys
      before_script:
        - |
          openssl \
          aes-256-cbc \
          -K $encrypted_ce0c6f32e53f_key \
          -iv $encrypted_ce0c6f32e53f_iv \
          -in keys.tar.enc \
          -out keys.tar \
          -d
        - tar xvf keys.tar
        - docker pull $IMAGE
      script:
        - set -e
        - |
          docker-compose -f compose/prod.yaml run --rm server \
            bash -c './manage.py migrate && ./manage.py loaddata statuses'
        - docker-compose -f compose/prod.yaml down
        - docker stack deploy --prune --compose-file compose/prod.yaml phonerepair
        - docker service update phonerepair_server --image $IMAGE
        - docker service update phonerepair_worker --image $IMAGE
        - docker system prune -f
